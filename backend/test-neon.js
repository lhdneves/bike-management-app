const { PrismaClient } = require('@prisma/client');

async function testNeon() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç Testando conex√£o com Neon...\n');
    
    // 1. Verificar conex√£o
    const dbInfo = await prisma.$queryRaw`
      SELECT current_database() as database, 
             current_user as user,
             version() as version
    `;
    console.log('‚úÖ Conex√£o estabelecida');
    console.log('üìä Informa√ß√µes do banco:', dbInfo[0]);
    
    // 2. Verificar tabelas criadas
    const tables = await prisma.$queryRaw`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public'
      ORDER BY tablename
    `;
    console.log('\nüìã Tabelas criadas:');
    tables.forEach(t => console.log(`   - ${t.tablename}`));
    
    // 3. Testar opera√ß√£o CRUD
    console.log('\nüß™ Testando opera√ß√µes CRUD...');
    
    // Criar usu√°rio de teste
    const testUser = await prisma.user.create({
      data: {
        email: 'test-neon@example.com',
        name: 'Test Neon User',
        passwordHash: '$2b$12$test',
        role: 'BIKE_OWNER'
      }
    });
    console.log('‚úÖ CREATE: Usu√°rio criado');
    
    // Ler usu√°rio
    const foundUser = await prisma.user.findUnique({
      where: { email: 'test-neon@example.com' }
    });
    console.log('‚úÖ READ: Usu√°rio encontrado');
    
    // Atualizar usu√°rio
    await prisma.user.update({
      where: { id: testUser.id },
      data: { name: 'Updated Neon User' }
    });
    console.log('‚úÖ UPDATE: Usu√°rio atualizado');
    
    // Deletar usu√°rio
    await prisma.user.delete({
      where: { id: testUser.id }
    });
    console.log('‚úÖ DELETE: Usu√°rio removido');
    
    console.log('\nüéâ Todos os testes passaram! Neon est√° funcionando perfeitamente.');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testNeon();