generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String
  email              String               @unique
  passwordHash       String               @map("password_hash")
  phoneNumber        String?              @map("phone_number")
  role               UserRole
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  bikes              Bike[]
  mechanic           Mechanic?
  passwordResetTokens PasswordResetToken[]
  emailPreferences   UserEmailPreference?
  emailLogs          EmailLog[]

  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
  @@map("users")
}

model Bike {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ownerId              String                 @map("owner_id") @db.Uuid
  name                 String
  description          String?
  manufacturer         String?
  type                 BikeType
  tractionType         TractionType           @map("traction_type")
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  owner                User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  components           Component[]
  maintenanceRecords   MaintenanceRecord[]
  scheduledMaintenance ScheduledMaintenance[]

  @@index([ownerId], map: "idx_bikes_owner_id")
  @@map("bikes")
}

model Component {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bikeId           String    @map("bike_id") @db.Uuid
  name             String
  description      String?
  installationDate DateTime? @map("installation_date") @db.Date
  observation      String?
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  bike             Bike      @relation(fields: [bikeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([bikeId], map: "idx_components_bike_id")
  @@map("components")
}

model Mechanic {
  id                 String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId             String              @unique @map("user_id") @db.Uuid
  address            String
  phone              String
  openingHours       String?             @map("opening_hours")
  rating             Decimal?            @db.Decimal(3, 2)
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  maintenanceRecords MaintenanceRecord[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_mechanics_user_id")
  @@map("mechanics")
}

model MaintenanceRecord {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bikeId             String    @map("bike_id") @db.Uuid
  mechanicId         String?   @map("mechanic_id") @db.Uuid
  serviceDate        DateTime  @map("service_date") @db.Date
  serviceDescription String    @map("service_description")
  cost               Decimal?  @db.Decimal(10, 2)
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  mechanicName       String?   @map("mechanic_name")
  bike               Bike      @relation(fields: [bikeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mechanic           Mechanic? @relation(fields: [mechanicId], references: [id], onUpdate: NoAction)

  @@index([bikeId], map: "idx_maintenance_records_bike_id")
  @@index([mechanicId], map: "idx_maintenance_records_mechanic_id")
  @@map("maintenance_records")
}

model ScheduledMaintenance {
  id                     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bikeId                 String   @map("bike_id") @db.Uuid
  scheduledDate          DateTime @map("scheduled_date") @db.Date
  serviceDescription     String   @map("service_description")
  notificationDaysBefore Int?     @map("notification_days_before")
  isCompleted            Boolean  @default(false) @map("is_completed")
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  bike                   Bike       @relation(fields: [bikeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emailLogs              EmailLog[]

  @@index([bikeId], map: "idx_scheduled_maintenance_bike_id")
  @@index([scheduledDate], map: "idx_scheduled_maintenance_date")
  @@map("scheduled_maintenance")
}

model Banner {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  imageUrl    String    @map("image_url")
  targetUrl   String?   @map("target_url")
  description String?
  startDate   DateTime? @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  isActive    Boolean   @default(true) @map("is_active")
  tags        String[]
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("banners")
}

model PasswordResetToken {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  usedAt    DateTime? @map("used_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_password_reset_tokens_token")
  @@index([userId], map: "idx_password_reset_tokens_user_id")
  @@index([expiresAt], map: "idx_password_reset_tokens_expires_at")
  @@map("password_reset_tokens")
}

enum UserRole {
  BIKE_OWNER
  MECHANIC
  ADMIN
}

enum BikeType {
  SPEED
  MOUNTAIN_BIKE
  ELECTRIC
  URBAN
}

enum TractionType {
  MANUAL
  ASSISTED
}

model UserEmailPreference {
  id                    String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                String               @unique @map("user_id") @db.Uuid
  maintenanceReminders  Boolean              @default(true) @map("maintenance_reminders")
  reminderFrequency     String               @default("once") @map("reminder_frequency") @db.VarChar(20)
  unsubscribedAt        DateTime?            @map("unsubscribed_at") @db.Timestamptz(6)
  createdAt             DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_email_preferences")
}

model EmailLog {
  id                      String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                  String                @map("user_id") @db.Uuid
  scheduledMaintenanceId  String?               @map("scheduled_maintenance_id") @db.Uuid
  emailType               String                @map("email_type") @db.VarChar(50)
  recipientEmail          String                @map("recipient_email") @db.VarChar(255)
  resendId                String?               @map("resend_id") @db.VarChar(255)
  status                  String                @default("pending") @db.VarChar(20)
  sentAt                  DateTime?             @map("sent_at") @db.Timestamptz(6)
  errorMessage            String?               @map("error_message")
  createdAt               DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  scheduledMaintenance    ScheduledMaintenance? @relation(fields: [scheduledMaintenanceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_email_logs_user_id")
  @@index([scheduledMaintenanceId], map: "idx_email_logs_scheduled_maintenance_id")
  @@index([emailType], map: "idx_email_logs_email_type")
  @@index([status], map: "idx_email_logs_status")
  @@index([createdAt], map: "idx_email_logs_created_at")
  @@map("email_logs")
}
